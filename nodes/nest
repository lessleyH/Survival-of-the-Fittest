#!/usr/bin/env python
#The line above is important so that this file is interpreted with Python when running it.

import numpy as np
import random
import rospy
from ant_foraging.srv import GetNextLocations, UpdateNest, InitNest, GetNextLocationsResponse, UpdateNestResponse, EndRound, EndRoundResponse

DEPOSIT_RATE = 1
EVAPORATION_RATE = 1 #evaporation rate

class Nest():
    def __init__(self, dimension, i, j, foods):
        rospy.loginfo("NEST: in init")
        #TODO:get food locaitons from god 
        self.nest_i = int(i)
        self.nest_j = int(j)
        self.nest_food_stash = 0
        self.grid = [ [0] * dimension for i in range(dimension)]
        rospy.loginfo(foods)
        self.populate_food(foods)
        self.get_next_locations = rospy.Service('get_next_locations', GetNextLocations, self.handle_get_next_locations)
        self.update_nest = rospy.Service('update_nest', UpdateNest, self.handle_nest_update)
        self.end_round = rospy.Service('end_round', EndRound, self.handle_end_round)
        rospy.loginfo("NEST: Done init node")

    def populate_food(self, food_list):
        rospy.loginfo("NEST: Making pop food")
        #food_list list of tuples [(i,j,amount)]
        #place each food on grid
        for food in food_list:
            self.grid[int(food[0])][int(food[1])] = -int(food[2])

    #map coordinate to grid
    def pose_to_grid(self, x, y):
        rospy.loginfo("NEST: Pose to grid")
        i = int(x + 20)
        j = int(y + 20)
        return (i,j)

    #map grid lcoation to pose
    def grid_to_pose(self, i, j):
        rospy.loginfo("NEST: Grid to Pose")
        x = int(i - 20) + 0.5
        y = int(j - 20) + 0.5
        return (x,y)
    
    #return the next possible coordinates from a given location
    def get_choices(self, i, j, direction):
        rospy.loginfo("NEST: get Choices")
        #1= left
        #2 = forward
        #3 = right

        isNeg = False
        dir = direction

        if dir < 0:
            isNeg = True
            dir = -1 * dir

        degree = dir % 360

        if isNeg:
            degree = 360 - degree

        choices = []
        if degree > 135 or degree <= 225:
            choices.append([i-1, j-1])
            choices.append([i-1, j,])
            choices.append([i-1, j+1,])
        if degree > 225 or degree <= 315:
            choices.append([i-1, j+1])
            choices.append([i, j + 1,])
            choices.append([i+1, j+1,])
        if degree > 315 or degree <= 45:
            choices.append([i+1, j+1])
            choices.append([i+1, j,])
            choices.append([i+1, j-1,])
        if degree > 45 or degree <= 135:
            choices.append([i+1, j-1])
            choices.append([i, j-1,])
            choices.append([i-1, j-1,])

        #return the choices with phermones
        for choice in choices:
            choice.append(self.grid[choice[0]][choice[1]])
            toCoord = self.grid_to_pose(choice[0], choice[1])
            choice[0] = toCoord[0]
            choice[1] = toCoord[1]

        rospy.loginfo("NEST: Makes Choices")
        return choices

    def update_the_nest(self, x, y, hasFood):
        rospy.loginfo("NEST: Update the nest")
        gridpts = self.pose_to_grid(x, y)
        i = gridpts[0]
        j = gridpts[1]
        result = []
        #check out of bounds
        if i < 0 or i > len(self.grid) or j < 0 or j > len(self.grid[0]):
            result.append(1)
        else:
            result.append(0)

        #check is nest
        if i == self.nest_i and j == self.nest_j:
            if hasFood:
                self.nest_food_stash += 1
            result.append(1)
        else:
            result.append(0)

        #check food
        if self.grid[i][j] < 0:
            if not hasFood:
                self.grid[i][j] += 1
            result.append(1)
        else:
            result.append(0)

        #if not above, update phermone
        if sum(result) == 0:
            self.grid[i][j] += DEPOSIT_RATE

        rospy.loginfo("NEST: Sending results")
        return result

    def handle_get_next_locations(self, req):
        rospy.loginfo("NEST: handle_get_next_locations")
        newPos = self.pose_to_grid(req.x, req.y)
        choices = self.get_choices(newPos[0], newPos[1], req.dir) #returns list of lists of choices with [x, y, phermones]
        rospy.loginfo(choices)
        #TODO: set each choice to a srv return variable
        response = GetNextLocationsResponse()
        response.x1 = choices[0][0]
        response.y1 = choices[0][1]
        response.p1 = choices[0][2]
        response.x2 = choices[1][0]
        response.y2 = choices[1][1]
        response.p2 = choices[1][2]
        response.x3 = choices[2][0]
        response.y3 = choices[2][1]
        response.p3 = choices[2][2]
        return response


    def handle_nest_update(self, req):
        rospy.loginfo("NEST: handle_nest_update")
        checks = self.update_the_nest(req.x, req.y, req.hasFood)
        #TODO: return the boolean values of bounds, nest, food nicely
        rospy.loginfo("NEST: got checks")
        rospy.loginfo(checks)
        response = UpdateNestResponse()
        response.outOfBounds = checks[0]
        response.isNest = checks[1]
        response.isFood = checks[2]
        return response

    def handle_end_round(self, req):
        rospy.loginfo("NEST: end_round_update")
        self.evaporate()
        return EndRoundResponse(1)


    # after each round, evaporate
    def evaporate(self):
        rospy.loginfo("NEST: evaporates")
        for i in range(len(self.grid)):
            for j in range(len(self.grid[0])):
                self.grid[i][j] -= EVAPORATION_RATE
        
def main():
    """Main function."""
    rospy.wait_for_service('init_nest') 
    rospy.loginfo("NEST: Waiting for service") 
    try:
        rospy.loginfo("NEST: Getting for service")
        init_nest = rospy.ServiceProxy('init_nest', InitNest)
        response = init_nest()
        i = response.i
        j = response.j
        foods = response.foods
        foodss = foods.strip('')
        rospy.loginfo(foodss)

        foodSplit = foodss.split(' ')
        rospy.loginfo(foodSplit)
        foodList = [food.split(',') for food in foodSplit]
        

        nest = Nest(40, i, j, foodList)
        rospy.loginfo("NEST: Done with service")

    except rospy.ServiceException as e:
        print("Service call failed: %s"%e)
    
    rospy.spin()
    rospy.on_shutdown(nest.stop)


if __name__ == "__main__":
    """Run the main function."""
    rospy.init_node('Nest')
    rospy.loginfo("Init node of Nest") 
    rospy.sleep(2)   
    try:
        main()
    except rospy.ROSInterruptException:
        pass
