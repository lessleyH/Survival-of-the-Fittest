#!/usr/bin/env python
#The line above is important so that this file is interpreted with Python when running it.
import numpy as np
import random
import math
# import of relevant libraries.
import rospy # module for ROS APIs
from geometry_msgs.msg import Twist, Pose   # Msg of the position of the robot
from nav_msgs.msg import Odometry  # Msg of the path
from sensor_msgs.msg import LaserScan # message type for scan
from ant_foraging.srv import GetNextLocations, UpdateNest, InitNest, GetNextLocationsResponse, UpdateNestResponse, AntStart, AntStartResponse

# Constants.
FREQUENCY = 10 #Hz
LINEAR_VELOCITY = 0.5 # m/s
ANGULAR_VELOCITY = math.pi/4 # rad/s
LASER_ANGLE_FRONT = 0 # radians
MIN_THRESHOLD_DISTANCE = 1.5 # m, threshold distance.
LINEAR_VELOCITY_CONSTANT = 1.5

DEFAULT_ODOM_TOPIC = '/odom'
DEFAULT_SCAN_TOPIC = '/scan'
DEFAULT_CMD_VEL_TOPIC = 'cmd_vel'

class Ant():
    def __init__(self, sigma_1, signma_2, mu):
        "Constructor."

        self.ant_start = rospy.Service('ant_start', AntStart, self._ant_start_callback)


        # Setting up subscriber.
        self._odo_sub = rospy.Subscriber(DEFAULT_ODOM_TOPIC, Odometry, self._pos_callback)
        self._laser_sub = rospy.Subscriber(DEFAULT_SCAN_TOPIC, LaserScan, self._laser_callback, queue_size=1)

        # Setting up publishers
        self._cmd_pub = rospy.Publisher(DEFAULT_CMD_VEL_TOPIC, Twist, queue_size=1)

        self.pos_y = 0 
        self.pos_x = 0 
        self.pos_z = 0
        self.ishome = None # Nest positoin type: Boolean
        
        self.flip_dir = False # Turns robot 180 type: Boolean.   
        
        self.hasfood = False # Keeps track of food  type: Boolean. 
        self.removed = False # Keeps track of robot being stopped type: Boolean
        self.direction = 2 # Integer rep. of direction type: int 

        self.pheremones = None
        self.sigma_1 = sigma_1 
        self.sigma_2 = signma_2
        self.mu_og = mu
        self.mu = mu # Dictates how much ant favors movement towarsds empty cells 
        self.potential_coordinates = None
        self._close_obstacle = False # TODO: Fix obstacle location

        self.orientation = 0
        rospy.loginfo("Hi, set up ant done")

    def move(self): 
        "Function to move the robot in the desired direction and check if it has food, removed, or is home"
        rospy.loginfo("Hi, Ant in the move function")
        goal = self.randomize_direction()
        if not self.removed:  #if the ant is not dead
            rospy.loginfo("Hi,Ant going to move_helper function")
            self.move_helper(goal)
  
        rospy.loginfo("waiting for nest update") 
        rospy.wait_for_service('update_nest') 
        try: 
            rospy.loginfo("NEST UPDATE WYA") 
            update_nest = rospy.ServiceProxy('update_nest', UpdateNest)
            resp2 = update_nest(self.pos_x, self.pos_y, self.hasfood) 
            self.removed = resp2.outOfBounds
            self.hasfood = resp2.isNest
            self.ishome = resp2.isFood
            rospy.loginfo("DONE UPDATING FROM NEST -ANT") 

        except rospy.ServiceException as e:
            print("Service call failed in the move function in ant: %s"%e)

        rospy.loginfo("CHEKCING IF REMOVED") 
        if self.removed: 
            self.pos_x = 0
            self.pos_z = 0
            self.stop()

        else:
            rospy.loginfo("CHECKING FOR FOOD OR HOME") 
            if self.hasfood:
                rospy.loginfo("WE HAVE FOOD") 
                self.flip_dir = True 
                self.mu -= 0.3 # threshold for pheremones is stronger 

                vel_msg = Twist()
                vel_msg = (180*math.pi)/180 #Rotates 180 to return home
                # Publishing our vel_msg
                self._cmd_pub.publish(vel_msg)
                self.flip_dir = False

            if self.ishome:
                rospy.loginfo("WE ARE HOME") 
                self.hasfood = False
                self.flip_dir = True
                self.mu = self.mu_og
                
                vel_msg = Twist()
                vel_msg = (180*math.pi)/180 #Rotates 180 to return home
                # Publishing our vel_msg
                self._cmd_pub.publish(vel_msg)
                self.flip_dir = False
                rospy.loginfo("Hi, made it back!")

    def randomize_direction(self):
        "Function to randomize direction of the ant"
        rospy.loginfo("Hi, waiting for serevice in rand. location")
        rospy.wait_for_service('get_next_locations') 

        try: 
            rospy.loginfo("Hi, server requested")
            get_next_locations = rospy.ServiceProxy('get_next_locations', GetNextLocations)
            resp1 = get_next_locations(self.pos_x, self.pos_y, self.orientation) 
            self.pheremones = [resp1.p1, resp1.p2, resp1.p3]
            self.potential_coordinates = [(resp1.x1, resp1.y1),(resp1.x2, resp1.y2),(resp1.x3, resp1.y3)]
            rospy.loginfo("Hi, server requested DONE")
        except rospy.ServiceException as e:
            rospy.loginfo("Service failed")
            print("Service call failed in the randomize direction function: %s"%e)

        rospy.loginfo("Out of server calll")
        left_loc = self.potential_coordinates[0]
        front_loc = self.potential_coordinates[1]
        right_loc = self.potential_coordinates[2]

        rospy.loginfo(left_loc)
        rospy.loginfo(front_loc)
        rospy.loginfo(right_loc)

        #Update the Pheremones 
        lp = self.pheremones[0]
        fp = self.pheremones[1]
        rp = self.pheremones[2]


        p_m = 0.5 * (1 + np.tanh((lp + fp + rp)/100 - 1))
        if np.random.choice([0,1], 1, p=[1-p_m,p_m]):
            c = (self.mu + lp)**2 + (self.mu + fp)**2 + (self.mu + rp)**2
            rospy.loginfo(c)
            p_left = 1/c * (self.mu + lp)**2
            p_front = 1/c * (self.mu + fp)**2
            p_right = 1/c * (self.mu + rp)**2
        else: 
            goal = Pose()
            goal.position.x = self.pos_x
            goal.position.y = self.pos_y
            rospy.loginfo("ANT: Same goal")
            return goal 
            
        rospy.loginfo("ANT rnd choice") 

        #normalizing probabilities 
        p_all = p_left + p_right + p_front
        if p_all != 0:
            p_left /= p_all
            p_right /= p_all
            p_front /= p_all

            next_loc = np.random.choice([1,2,3], 1, p=[p_left,p_right,p_front])
        else:
            next_loc = np.random.choice([1,2,3],1)
        
        rospy.loginfo(next_loc)
        self.direction = next_loc #Updates direction for server 

        if next_loc == 1:
            dir = left_loc
        elif next_loc == 2:
            dir = front_loc
        elif next_loc == 3:
            dir = right_loc

        dir_x, dir_y = dir
        goal = Pose()
        goal.position.x = dir_x
        goal.position.y = dir_y

        return goal

    def move_forward(self, distance):
        
        rospy.loginfo("ANT moving forward") 
        rospy.loginfo(distance) 
        """Function to move_forward for a given distance."""
        # Rate at which to operate the while loop.
        rate = rospy.Rate(FREQUENCY)

        # Setting velocities. 
        twist_msg = Twist()
        twist_msg.linear.x = LINEAR_VELOCITY
        rospy.loginfo("ANT setting linear velocity") 
        start_time = rospy.get_rostime()
        duration = rospy.Duration(distance/twist_msg.linear.x)

        # Loop.
        while not rospy.is_shutdown():
            rospy.loginfo("ANT In loop") 
            # Check if traveled of given distance based on time.
            if rospy.get_rostime() - start_time >= duration:
                break

            # Publish message.
            self._cmd_pub.publish(twist_msg)
            rospy.loginfo("ANT move forward pub msg") 

            # Sleep to keep the set publishing frequency.
            rate.sleep()

        # Traveled the required distance, stop.
        self.stop()
        rospy.loginfo("ANT done moving forward") 
        
    def rotate_in_place(self, rotation_angle):
        rospy.loginfo("ANT rotating in place") 
        """
        Rotate in place the robot of rotation_angle (rad) based on fixed velocity.
        Assumption: Counterclockwise rotation.
        """
        twist_msg = Twist()
        twist_msg.angular.z = ANGULAR_VELOCITY
        
        duration = rotation_angle / twist_msg.angular.z
        start_time = rospy.get_rostime()
        rate = rospy.Rate(FREQUENCY)
        while not rospy.is_shutdown():
            # Check if done
            if rospy.get_rostime() - start_time >= rospy.Duration(duration):
                break
                
            # Publish message.
            self._cmd_pub.publish(twist_msg)
            
            # Sleep to keep the set frequency.
            rate.sleep()

        # Rotated the required angle, stop.
        self.stop()
        rospy.loginfo("ANT done rotating in place") 

    def move_helper(self, goal): 
        """Moves the robot to the goal."""

        rospy.loginfo("ANT Move helper function") 
        rospy.loginfo(goal) 
        self.rotate_in_place(self.steering_angle(goal))
        self.move_forward(self.euclidean_distance(goal))
        rospy.loginfo("ANT done with move helper") 

  
    def euclidean_distance(self, goal):
        """Euclidean distance between current pose and the goal."""
        rospy.loginfo("ANT Euclidean dist") 
        return math.sqrt(math.pow((goal.position.x - self.pos_x), 2) + math.pow((goal.position.y - self.pos_y), 2))


    def steering_angle(self, goal):
        rospy.loginfo("ANT steering angle") 
        """helper function to angular velocity to help steer"""
        orientation = math.atan2(goal.position.y - self.pos_y, goal.position.x - self.pos_x)
        self.orientation += orientation
        return orientation

    def angular_vel(self, goal, constant=6):
        """Process angular velocity."""
        return constant * (self.steering_angle(goal) - self.pos_z)

    #pos and from the center 
    def _pos_callback(self, data):
        """Processing of odom position message."""
        self.pos_x = round(data.pose.pose.position.x, 2)
        self.pos_y = round(data.pose.pose.position.y, 2)
        self.pos_z = data.pose.pose.position.z

    def stop(self):
        """Stop the robot. Borrowed from Simple Motion"""
        twist_msg = Twist()
        self._cmd_pub.publish(twist_msg)

    def _laser_callback(self, msg):
        """Processing of laser message. Borrowed from Simple Motion"""
        # Access to the index of the measurement in front of the robot.
        # NOTE: assumption: the one at angle 0 corresponds to the front.
        i = int((LASER_ANGLE_FRONT - msg.angle_min) / msg.angle_increment)
        if msg.ranges[i] <= MIN_THRESHOLD_DISTANCE:
            self._close_obstacle = True
        else:
            self._close_obstacle = False
        
    def _ant_start_callback(self, req):
        self.move()
        return AntStartResponse(1)

def main():
    """Main function."""
    # Sleep for a few seconds to wait for the registration.
    rospy.sleep(2)
    sigma1 = 1
    sigma2 =1
    mu=1


    # Initialization of the class for the simple motion.
    ant_bot = Ant(sigma_1=sigma1, signma_2=sigma2, mu=mu)
    rospy.loginfo("Hi, I'm init")
    while not rospy.is_shutdown():
        # rospy.loginfo("Hi, in LOOP")
        x=5
        
    #ant_bot.move()
    # If interrupted, send a stop command.
    # rospy.on_shutdown(ant_bot.stop)

if __name__ == "__main__":
    """Run the main function."""
    
    rospy.init_node('Ant')
    rospy.loginfo("Hi, I'm an ant")
    try:
        
        main()
    except rospy.ROSInterruptException:
        rospy.logerr("ROS node interrupted.")